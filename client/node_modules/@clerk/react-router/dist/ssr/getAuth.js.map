{"version":3,"sources":["../../src/ssr/getAuth.ts"],"sourcesContent":["import { stripPrivateDataFromObject } from '@clerk/backend/internal';\n\nimport { noLoaderArgsPassedInGetAuth } from '../utils/errors';\nimport { authenticateRequest } from './authenticateRequest';\nimport { loadOptions } from './loadOptions';\nimport type { GetAuthReturn, LoaderFunctionArgs, RootAuthLoaderOptions } from './types';\n\ntype GetAuthOptions = Pick<RootAuthLoaderOptions, 'secretKey'>;\n\nexport async function getAuth(args: LoaderFunctionArgs, opts?: GetAuthOptions): GetAuthReturn {\n  if (!args || (args && (!args.request || !args.context))) {\n    throw new Error(noLoaderArgsPassedInGetAuth);\n  }\n\n  const loadedOptions = loadOptions(args, opts);\n  // Note: authenticateRequest() will throw a redirect if the auth state is determined to be handshake\n  const requestState = await authenticateRequest(args, loadedOptions);\n\n  return stripPrivateDataFromObject(requestState.toAuth());\n}\n"],"mappings":";AAAA,SAAS,kCAAkC;AAE3C,SAAS,mCAAmC;AAC5C,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAK5B,eAAsB,QAAQ,MAA0B,MAAsC;AAC5F,MAAI,CAAC,QAAS,SAAS,CAAC,KAAK,WAAW,CAAC,KAAK,UAAW;AACvD,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AAEA,QAAM,gBAAgB,YAAY,MAAM,IAAI;AAE5C,QAAM,eAAe,MAAM,oBAAoB,MAAM,aAAa;AAElE,SAAO,2BAA2B,aAAa,OAAO,CAAC;AACzD;","names":[]}