{"version":3,"sources":["../../src/utils/env.ts"],"sourcesContent":["import { isTruthy } from '@clerk/shared/underscore';\nimport type { AppLoadContext } from 'react-router';\n\ntype CloudflareEnv = { env: Record<string, string> };\n\nconst hasCloudflareProxyContext = (context: any): context is { cloudflare: CloudflareEnv } => {\n  return !!context?.cloudflare?.env;\n};\n\nconst hasCloudflareContext = (context: any): context is CloudflareEnv => {\n  return !!context?.env;\n};\n\n/**\n *\n * Utility function to get env variables across Node and Edge runtimes.\n *\n * @param name\n * @returns string\n */\nexport const getEnvVariable = (name: string, context: AppLoadContext | undefined): string => {\n  // Node envs\n  if (typeof process !== 'undefined' && process.env && typeof process.env[name] === 'string') {\n    return process.env[name];\n  }\n\n  // @ts-expect-error - Vite specific\n  if (typeof import.meta !== 'undefined' && import.meta.env && typeof import.meta.env[name] === 'string') {\n    // @ts-expect-error - Vite specific\n    return import.meta.env[name];\n  }\n\n  if (hasCloudflareProxyContext(context)) {\n    return context.cloudflare.env[name] || '';\n  }\n\n  // Cloudflare\n  if (hasCloudflareContext(context)) {\n    return context.env[name] || '';\n  }\n\n  // Check whether the value exists in the context object directly\n  if (context && typeof context[name] === 'string') {\n    return context[name];\n  }\n\n  // Cloudflare workers\n  try {\n    return globalThis[name as keyof typeof globalThis];\n  } catch (_) {\n    // This will raise an error in Cloudflare Pages\n  }\n\n  return '';\n};\n\nexport const getPublicEnvVariables = (context: AppLoadContext | undefined) => {\n  return {\n    publishableKey:\n      getEnvVariable('VITE_CLERK_PUBLISHABLE_KEY', context) || getEnvVariable('CLERK_PUBLISHABLE_KEY', context),\n    domain: getEnvVariable('VITE_CLERK_DOMAIN', context) || getEnvVariable('CLERK_DOMAIN', context),\n    isSatellite:\n      isTruthy(getEnvVariable('VITE_CLERK_IS_SATELLITE', context)) ||\n      isTruthy(getEnvVariable('CLERK_IS_SATELLITE', context)),\n    proxyUrl: getEnvVariable('VITE_CLERK_PROXY_URL', context) || getEnvVariable('CLERK_PROXY_URL', context),\n    signInUrl: getEnvVariable('VITE_CLERK_SIGN_IN_URL', context) || getEnvVariable('CLERK_SIGN_IN_URL', context),\n    signUpUrl: getEnvVariable('VITE_CLERK_SIGN_UP_URL', context) || getEnvVariable('CLERK_SIGN_UP_URL', context),\n    clerkJsUrl: getEnvVariable('VITE_CLERK_JS_URL', context) || getEnvVariable('CLERK_JS', context),\n    clerkJsVariant: (getEnvVariable('VITE_CLERK_JS_VARIANT', context) ||\n      getEnvVariable('CLERK_JS_VARIANT', context)) as '' | 'headless' | undefined,\n    clerkJsVersion: getEnvVariable('VITE_CLERK_JS_VERSION', context) || getEnvVariable('CLERK_JS_VERSION', context),\n    telemetryDisabled:\n      isTruthy(getEnvVariable('VITE_CLERK_TELEMETRY_DISABLED', context)) ||\n      isTruthy(getEnvVariable('CLERK_TELEMETRY_DISABLED', context)),\n    telemetryDebug:\n      isTruthy(getEnvVariable('VITE_CLERK_TELEMETRY_DEBUG', context)) ||\n      isTruthy(getEnvVariable('CLERK_TELEMETRY_DEBUG', context)),\n    signInForceRedirectUrl:\n      getEnvVariable('VITE_CLERK_SIGN_IN_FORCE_REDIRECT_URL', context) ||\n      getEnvVariable('CLERK_SIGN_IN_FORCE_REDIRECT_URL', context),\n    signUpForceRedirectUrl:\n      getEnvVariable('VITE_CLERK_SIGN_UP_FORCE_REDIRECT_URL', context) ||\n      getEnvVariable('CLERK_SIGN_UP_FORCE_REDIRECT_URL', context),\n    signInFallbackRedirectUrl:\n      getEnvVariable('VITE_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL', context) ||\n      getEnvVariable('CLERK_SIGN_IN_FALLBACK_REDIRECT_URL', context),\n    signUpFallbackRedirectUrl:\n      getEnvVariable('VITE_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL', context) ||\n      getEnvVariable('CLERK_SIGN_UP_FALLBACK_REDIRECT_URL', context),\n    afterSignInUrl:\n      getEnvVariable('VITE_CLERK_AFTER_SIGN_IN_URL', context) || getEnvVariable('CLERK_AFTER_SIGN_IN_URL', context),\n    afterSignUpUrl:\n      getEnvVariable('VITE_CLERK_AFTER_SIGN_UP_URL', context) || getEnvVariable('CLERK_AFTER_SIGN_UP_URL', context),\n  };\n};\n"],"mappings":";AAAA,SAAS,gBAAgB;AAAzB;AAKA,IAAM,4BAA4B,CAAC,YAA2D;AAL9F;AAME,SAAO,CAAC,GAAC,wCAAS,eAAT,mBAAqB;AAChC;AAEA,IAAM,uBAAuB,CAAC,YAA2C;AACvE,SAAO,CAAC,EAAC,mCAAS;AACpB;AASO,IAAM,iBAAiB,CAAC,MAAc,YAAgD;AAE3F,MAAI,OAAO,YAAY,eAAe,QAAQ,OAAO,OAAO,QAAQ,IAAI,IAAI,MAAM,UAAU;AAC1F,WAAO,QAAQ,IAAI,IAAI;AAAA,EACzB;AAGA,MAAI,OAAO,gBAAgB,eAAe,YAAY,OAAO,OAAO,YAAY,IAAI,IAAI,MAAM,UAAU;AAEtG,WAAO,YAAY,IAAI,IAAI;AAAA,EAC7B;AAEA,MAAI,0BAA0B,OAAO,GAAG;AACtC,WAAO,QAAQ,WAAW,IAAI,IAAI,KAAK;AAAA,EACzC;AAGA,MAAI,qBAAqB,OAAO,GAAG;AACjC,WAAO,QAAQ,IAAI,IAAI,KAAK;AAAA,EAC9B;AAGA,MAAI,WAAW,OAAO,QAAQ,IAAI,MAAM,UAAU;AAChD,WAAO,QAAQ,IAAI;AAAA,EACrB;AAGA,MAAI;AACF,WAAO,WAAW,IAA+B;AAAA,EACnD,SAAS,GAAG;AAAA,EAEZ;AAEA,SAAO;AACT;AAEO,IAAM,wBAAwB,CAAC,YAAwC;AAC5E,SAAO;AAAA,IACL,gBACE,eAAe,8BAA8B,OAAO,KAAK,eAAe,yBAAyB,OAAO;AAAA,IAC1G,QAAQ,eAAe,qBAAqB,OAAO,KAAK,eAAe,gBAAgB,OAAO;AAAA,IAC9F,aACE,SAAS,eAAe,2BAA2B,OAAO,CAAC,KAC3D,SAAS,eAAe,sBAAsB,OAAO,CAAC;AAAA,IACxD,UAAU,eAAe,wBAAwB,OAAO,KAAK,eAAe,mBAAmB,OAAO;AAAA,IACtG,WAAW,eAAe,0BAA0B,OAAO,KAAK,eAAe,qBAAqB,OAAO;AAAA,IAC3G,WAAW,eAAe,0BAA0B,OAAO,KAAK,eAAe,qBAAqB,OAAO;AAAA,IAC3G,YAAY,eAAe,qBAAqB,OAAO,KAAK,eAAe,YAAY,OAAO;AAAA,IAC9F,gBAAiB,eAAe,yBAAyB,OAAO,KAC9D,eAAe,oBAAoB,OAAO;AAAA,IAC5C,gBAAgB,eAAe,yBAAyB,OAAO,KAAK,eAAe,oBAAoB,OAAO;AAAA,IAC9G,mBACE,SAAS,eAAe,iCAAiC,OAAO,CAAC,KACjE,SAAS,eAAe,4BAA4B,OAAO,CAAC;AAAA,IAC9D,gBACE,SAAS,eAAe,8BAA8B,OAAO,CAAC,KAC9D,SAAS,eAAe,yBAAyB,OAAO,CAAC;AAAA,IAC3D,wBACE,eAAe,yCAAyC,OAAO,KAC/D,eAAe,oCAAoC,OAAO;AAAA,IAC5D,wBACE,eAAe,yCAAyC,OAAO,KAC/D,eAAe,oCAAoC,OAAO;AAAA,IAC5D,2BACE,eAAe,4CAA4C,OAAO,KAClE,eAAe,uCAAuC,OAAO;AAAA,IAC/D,2BACE,eAAe,4CAA4C,OAAO,KAClE,eAAe,uCAAuC,OAAO;AAAA,IAC/D,gBACE,eAAe,gCAAgC,OAAO,KAAK,eAAe,2BAA2B,OAAO;AAAA,IAC9G,gBACE,eAAe,gCAAgC,OAAO,KAAK,eAAe,2BAA2B,OAAO;AAAA,EAChH;AACF;","names":[]}