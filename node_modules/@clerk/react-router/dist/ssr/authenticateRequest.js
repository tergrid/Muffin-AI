// src/ssr/authenticateRequest.ts
import { createClerkClient } from "@clerk/backend";
import { AuthStatus } from "@clerk/backend/internal";
import { patchRequest } from "./utils.js";
async function authenticateRequest(args, opts) {
  const { request } = args;
  const { audience, authorizedParties } = opts;
  const { apiUrl, secretKey, jwtKey, proxyUrl, isSatellite, domain, publishableKey } = opts;
  const { signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = opts;
  const requestState = await createClerkClient({
    apiUrl,
    secretKey,
    jwtKey,
    proxyUrl,
    isSatellite,
    domain,
    publishableKey,
    userAgent: `${"@clerk/react-router"}@${"0.1.1"}`
  }).authenticateRequest(patchRequest(request), {
    audience,
    authorizedParties,
    signInUrl,
    signUpUrl,
    afterSignInUrl,
    afterSignUpUrl
  });
  const hasLocationHeader = requestState.headers.get("location");
  if (hasLocationHeader) {
    throw new Response(null, { status: 307, headers: requestState.headers });
  }
  if (requestState.status === AuthStatus.Handshake) {
    throw new Error("Clerk: unexpected handshake without redirect");
  }
  return requestState;
}
export {
  authenticateRequest
};
//# sourceMappingURL=authenticateRequest.js.map